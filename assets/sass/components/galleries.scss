@use '../variables' as *;
@use '../tokens/space';

/* ********************************************
* GALLERIES
* ********************************************/

.galleries {
  list-style: none;
  padding-inline-start: 0;

  display: grid;
  gap: 2rem 3rem;
  grid-template-columns: repeat(auto-fit, min(100%, 18rem));

  align-items: end;

  @media (min-width: $breakpoint-m) {
    > :first-child {
      grid-column: span 2;
      grid-row: span 2;
      align-self: start;
    }
  }

  figcaption {
    background-image: linear-gradient(
      to bottom,
      rgba(255, 255, 255, 0),
      rgba(255, 255, 255, 0) 70%,
      rgba(0, 0, 0, 0.7) 90%
    );
    position: absolute;
    inset: 0;
    margin: 3px;
    padding: 0.5rem 1rem;
    display: flex;
    align-items: flex-end;
    font-size: var(--step-1);
  }

  .diaporama {
    position: relative;
    overflow: hidden;

    > img {
      position: absolute;
      top: 1px;
      left: 1px;
      width: calc(100% - 2px);
      height: calc(100% - 2px);
      object-fit: cover;

      transform-origin: 50% 50%;
      transform: scale(var(--scale-start))
        translate(var(--pan-x-start), var(--pan-y-start));
    }

    &::before {
      content: '';
      display: block;
      padding-block-end: 66.666%;
    }
  }

  .diaporama_2,
  .diaporama_3,
  .diaporama_4 {
    img {
      opacity: 0;
      animation-timing-function: linear;
      animation-iteration-count: infinite;
      animation-play-state: paused;
    }

    &.run img {
      animation-play-state: running;
    }
  }

  $ken_burns_2_delay: 2 * -0.2;
  .diaporama_2 {
    img {
      animation-name: ken_burns_2;
      animation-duration: $diaporama-timing * 2;
    }

    img:nth-of-type(2) {
      animation-delay: $diaporama-timing * $ken_burns_2_delay;
    }

    img:nth-of-type(1) {
      animation-delay: $diaporama-timing * (1 + $ken_burns_2_delay);
    }
  }

  $ken_burns_3_delay: 3 * -0.1333;
  .diaporama_3 {
    img {
      animation-name: ken_burns_3;
      animation-duration: $diaporama-timing * 3;
    }

    img:nth-of-type(3) {
      animation-delay: $diaporama-timing * $ken_burns_3_delay;
    }

    img:nth-of-type(2) {
      animation-delay: $diaporama-timing * (1 + $ken_burns_3_delay);
    }

    img:nth-of-type(1) {
      animation-delay: $diaporama-timing * (2 + $ken_burns_3_delay);
    }
  }

  $ken_burns_4_delay: 4 * -0.1;
  .diaporama_4 {
    img {
      animation-name: ken_burns_4;
      animation-duration: $diaporama-timing * 4;
    }

    img:nth-of-type(4) {
      animation-delay: $diaporama-timing * $ken_burns_4_delay;
    }

    img:nth-of-type(3) {
      animation-delay: $diaporama-timing * (1 + $ken_burns_4_delay);
    }

    img:nth-of-type(2) {
      animation-delay: $diaporama-timing * (2 + $ken_burns_4_delay);
    }

    img:nth-of-type(1) {
      animation-delay: $diaporama-timing * (3 + $ken_burns_4_delay);
    }
  }
}

$scale_min: 1.1;
$scale_max: 1.3;

@keyframes ken_burns_2 {
  0% {
    opacity: 0;
    transform: scale(var(--scale-start))
      translate(var(--pan-x-start), var(--pan-y-start));
  }

  20% {
    opacity: 1;
  }

  50% {
    opacity: 1;
  }

  70% {
    opacity: 0;
    transform: scale(calc($scale_max + $scale_min - var(--scale-start)))
      translate(0, 0);
  }

  100% {
    opacity: 0;
    transform: scale(var(--scale-start))
      translate(var(--pan-x-start), var(--pan-y-start));
  }
}

@keyframes ken_burns_3 {
  0% {
    opacity: 0;
    transform: scale(var(--scale-start))
      translate(var(--pan-x-start), var(--pan-y-start));
  }

  13.33% {
    opacity: 1;
  }

  33.33% {
    opacity: 1;
  }

  46.66% {
    opacity: 0;
    transform: scale(calc($scale_max + $scale_min - var(--scale-start)))
      translate(0, 0);
  }

  100% {
    opacity: 0;
    transform: scale(var(--scale-start))
      translate(var(--pan-x-start), var(--pan-y-start));
  }
}

@keyframes ken_burns_4 {
  0% {
    opacity: 0;
    transform: scale(var(--scale-start))
      translate(var(--pan-x-start), var(--pan-y-start));
  }

  10% {
    opacity: 1;
  }

  25% {
    opacity: 1;
  }

  35% {
    opacity: 0;
    transform: scale(calc($scale_max + $scale_min - var(--scale-start)))
      translate(0, 0);
  }

  100% {
    opacity: 0;
    transform: scale(var(--scale-start))
      translate(var(--pan-x-start), var(--pan-y-start));
  }
}
